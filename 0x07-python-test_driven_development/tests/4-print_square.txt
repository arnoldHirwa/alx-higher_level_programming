The ``4-print_square`` module
=============================

Using ``print_square``
---------------------

This is a text file in reStructured Text format. First import ``print_square`` from the ``4-print_square`` module:

>>> print_square = __import__('4-print_square').print_square

Now use it:


Test with list
--------------------------------------------------------------------------------------
>>> print_square([1, 2, 4])
Traceback (most recent call last):
    ...
TypeError: size must be an integer



Test for none
-------------------------------------------------------------------------------------
>>> print_square(None)
Traceback (most recent call last):
    ...
TypeError: size must be an integer


Test Without a size
-------------------------------------------------------------------------------------
>>> print_square()
Traceback (most recent call last):
    ...
TypeError: print_square() missing 1 required positional argument: 'size'



Test infinity
-------------------------------------------------------------------------------------
>>> print_square(float('inf'))
Traceback (most recent call last):
    ...
TypeError: size must be an integer



Test none
-------------------------------------------------------------------------------------
>>> print_square(float('nan'))
Traceback (most recent call last):
    ...
TypeError: size must be an integer



Test Basic Usage
----------------------------------------------------------------------------------------
>>> print_square(4)
####
####
####
####



Test Size of zero will not print anything
----------------------------------------------------------------------------------------
>>> print_square(0)



Test Size must be an integer
----------------------------------------------------------------------------------------
>>> print_square("Carlos")
Traceback (most recent call last):
    ...
TypeError: size must be an integer



Test with negative, Size must be >= 0
----------------------------------------------------------------------------------------
>>> print_square(-1)
Traceback (most recent call last):
    ...
ValueError: size must be >= 0



Test Float and negative, If size is a float and is less than 0, print TypeError
---------------------------------------------------------------------------------------
>>> print_square(-2.5)
Traceback (most recent call last):
    ...
TypeError: size must be an integer
